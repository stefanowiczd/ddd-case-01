// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts_query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountStatus = `-- name: CreateAccountStatus :one
INSERT INTO accounts (customer_id, account_number, balance, currency, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, account_number, customer_id, balance, currency, status, created_at, updated_at
`

type CreateAccountStatusParams struct {
	CustomerID    pgtype.UUID
	AccountNumber string
	Balance       pgtype.Numeric
	Currency      string
	Status        string
}

func (q *Queries) CreateAccountStatus(ctx context.Context, arg CreateAccountStatusParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccountStatus,
		arg.CustomerID,
		arg.AccountNumber,
		arg.Balance,
		arg.Currency,
		arg.Status,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.CustomerID,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const depositAccountMoney = `-- name: DepositAccountMoney :exec
UPDATE accounts
SET balance = balance + $2
WHERE id = $1
`

type DepositAccountMoneyParams struct {
	ID      pgtype.UUID
	Balance pgtype.Numeric
}

func (q *Queries) DepositAccountMoney(ctx context.Context, arg DepositAccountMoneyParams) error {
	_, err := q.db.Exec(ctx, depositAccountMoney, arg.ID, arg.Balance)
	return err
}

const getCustomerAccounts = `-- name: GetCustomerAccounts :many
SELECT id, account_number, customer_id, balance, currency, status, created_at, updated_at FROM accounts
WHERE customer_id = $1
`

func (q *Queries) GetCustomerAccounts(ctx context.Context, customerID pgtype.UUID) ([]Account, error) {
	rows, err := q.db.Query(ctx, getCustomerAccounts, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountNumber,
			&i.CustomerID,
			&i.Balance,
			&i.Currency,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountStatus = `-- name: UpdateAccountStatus :exec
UPDATE accounts
SET status = $2
WHERE id = $1
`

type UpdateAccountStatusParams struct {
	ID     pgtype.UUID
	Status string
}

func (q *Queries) UpdateAccountStatus(ctx context.Context, arg UpdateAccountStatusParams) error {
	_, err := q.db.Exec(ctx, updateAccountStatus, arg.ID, arg.Status)
	return err
}

const withdrawAccountMoney = `-- name: WithdrawAccountMoney :exec
UPDATE accounts
SET balance = balance - $2
WHERE id = $1
`

type WithdrawAccountMoneyParams struct {
	ID      pgtype.UUID
	Balance pgtype.Numeric
}

func (q *Queries) WithdrawAccountMoney(ctx context.Context, arg WithdrawAccountMoneyParams) error {
	_, err := q.db.Exec(ctx, withdrawAccountMoney, arg.ID, arg.Balance)
	return err
}
