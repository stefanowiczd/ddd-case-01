// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_events.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountEvent = `-- name: CreateAccountEvent :one
INSERT INTO account_events (account_id, event_type, event_type_version, event_data, scheduled_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at
`

type CreateAccountEventParams struct {
	AccountID        pgtype.UUID
	EventType        string
	EventTypeVersion string
	EventData        []byte
	ScheduledAt      pgtype.Timestamptz
}

func (q *Queries) CreateAccountEvent(ctx context.Context, arg CreateAccountEventParams) (AccountEvent, error) {
	row := q.db.QueryRow(ctx, createAccountEvent,
		arg.AccountID,
		arg.EventType,
		arg.EventTypeVersion,
		arg.EventData,
		arg.ScheduledAt,
	)
	var i AccountEvent
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.EventType,
		&i.EventTypeVersion,
		&i.EventData,
		&i.CreatedAt,
		&i.ScheduledAt,
	)
	return i, err
}

const findAccountEventByID = `-- name: FindAccountEventByID :one
SELECT id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at FROM account_events
WHERE id = $1
`

func (q *Queries) FindAccountEventByID(ctx context.Context, id pgtype.UUID) (AccountEvent, error) {
	row := q.db.QueryRow(ctx, findAccountEventByID, id)
	var i AccountEvent
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.EventType,
		&i.EventTypeVersion,
		&i.EventData,
		&i.CreatedAt,
		&i.ScheduledAt,
	)
	return i, err
}

const findAccountEventsByAccountID = `-- name: FindAccountEventsByAccountID :many
SELECT id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at FROM account_events
WHERE account_id = $1
`

func (q *Queries) FindAccountEventsByAccountID(ctx context.Context, accountID pgtype.UUID) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, findAccountEventsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventData,
			&i.CreatedAt,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAccountEventsByAccountIDAndEventType = `-- name: FindAccountEventsByAccountIDAndEventType :many
SELECT id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at FROM account_events
WHERE account_id = $1 AND event_type = $2
`

type FindAccountEventsByAccountIDAndEventTypeParams struct {
	AccountID pgtype.UUID
	EventType string
}

func (q *Queries) FindAccountEventsByAccountIDAndEventType(ctx context.Context, arg FindAccountEventsByAccountIDAndEventTypeParams) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, findAccountEventsByAccountIDAndEventType, arg.AccountID, arg.EventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventData,
			&i.CreatedAt,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAccountEventsByDateRange = `-- name: FindAccountEventsByDateRange :many
SELECT id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at FROM account_events
WHERE created_at BETWEEN $1 AND $2
`

type FindAccountEventsByDateRangeParams struct {
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
}

func (q *Queries) FindAccountEventsByDateRange(ctx context.Context, arg FindAccountEventsByDateRangeParams) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, findAccountEventsByDateRange, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventData,
			&i.CreatedAt,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAccountEventsByDateRangeAndAccountID = `-- name: FindAccountEventsByDateRangeAndAccountID :many
SELECT id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at FROM account_events
WHERE created_at BETWEEN $1 AND $2 AND account_id = $3
`

type FindAccountEventsByDateRangeAndAccountIDParams struct {
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
	AccountID   pgtype.UUID
}

func (q *Queries) FindAccountEventsByDateRangeAndAccountID(ctx context.Context, arg FindAccountEventsByDateRangeAndAccountIDParams) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, findAccountEventsByDateRangeAndAccountID, arg.CreatedAt, arg.CreatedAt_2, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventData,
			&i.CreatedAt,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAccountEventsByDateRangeAndAccountIDAndEventType = `-- name: FindAccountEventsByDateRangeAndAccountIDAndEventType :many
SELECT id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at FROM account_events
WHERE created_at BETWEEN $1 AND $2 AND account_id = $3 AND event_type = $4
`

type FindAccountEventsByDateRangeAndAccountIDAndEventTypeParams struct {
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
	AccountID   pgtype.UUID
	EventType   string
}

func (q *Queries) FindAccountEventsByDateRangeAndAccountIDAndEventType(ctx context.Context, arg FindAccountEventsByDateRangeAndAccountIDAndEventTypeParams) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, findAccountEventsByDateRangeAndAccountIDAndEventType,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.AccountID,
		arg.EventType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventData,
			&i.CreatedAt,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAccountEventsTheNewestFirst = `-- name: FindAccountEventsTheNewestFirst :many
SELECT id, account_id, event_type, event_type_version, event_data, created_at, scheduled_at FROM account_events
ORDER BY created_at DESC
`

func (q *Queries) FindAccountEventsTheNewestFirst(ctx context.Context) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, findAccountEventsTheNewestFirst)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventData,
			&i.CreatedAt,
			&i.ScheduledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
