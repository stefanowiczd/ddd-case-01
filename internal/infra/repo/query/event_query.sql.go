// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_query.sql

package query

import (
	"context"
)

const findEvents = `-- name: FindEvents :many
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events
ORDER BY scheduled_at DESC
`

func (q *Queries) FindEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, findEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ContextID,
			&i.EventOrigin,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventState,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.Retry,
			&i.MaxRetry,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEventsByOrigin = `-- name: FindEventsByOrigin :many
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events
WHERE event_origin = $1
ORDER BY scheduled_at DESC
`

func (q *Queries) FindEventsByOrigin(ctx context.Context, eventOrigin string) ([]Event, error) {
	rows, err := q.db.Query(ctx, findEventsByOrigin, eventOrigin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ContextID,
			&i.EventOrigin,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventState,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.Retry,
			&i.MaxRetry,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEventsByOriginAndType = `-- name: FindEventsByOriginAndType :many
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events
WHERE event_origin = $1 AND event_type = $2
ORDER BY scheduled_at DESC
`

type FindEventsByOriginAndTypeParams struct {
	EventOrigin string
	EventType   string
}

func (q *Queries) FindEventsByOriginAndType(ctx context.Context, arg FindEventsByOriginAndTypeParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, findEventsByOriginAndType, arg.EventOrigin, arg.EventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ContextID,
			&i.EventOrigin,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventState,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.Retry,
			&i.MaxRetry,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEventsByOriginAndTypeAndState = `-- name: FindEventsByOriginAndTypeAndState :many
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events
WHERE event_origin = $1 AND event_type = $2 AND event_state = $3
ORDER BY scheduled_at DESC
`

type FindEventsByOriginAndTypeAndStateParams struct {
	EventOrigin string
	EventType   string
	EventState  string
}

func (q *Queries) FindEventsByOriginAndTypeAndState(ctx context.Context, arg FindEventsByOriginAndTypeAndStateParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, findEventsByOriginAndTypeAndState, arg.EventOrigin, arg.EventType, arg.EventState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ContextID,
			&i.EventOrigin,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventState,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.Retry,
			&i.MaxRetry,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
