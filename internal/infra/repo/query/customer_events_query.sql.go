// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer_events_query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomerEvent = `-- name: CreateCustomerEvent :one
INSERT INTO events (id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, retry, max_retry, event_data)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data
`

type CreateCustomerEventParams struct {
	ID               pgtype.UUID
	ContextID        pgtype.UUID
	EventOrigin      string
	EventType        string
	EventTypeVersion string
	EventState       string
	CreatedAt        pgtype.Timestamp
	ScheduledAt      pgtype.Timestamp
	Retry            int32
	MaxRetry         int32
	EventData        []byte
}

func (q *Queries) CreateCustomerEvent(ctx context.Context, arg CreateCustomerEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createCustomerEvent,
		arg.ID,
		arg.ContextID,
		arg.EventOrigin,
		arg.EventType,
		arg.EventTypeVersion,
		arg.EventState,
		arg.CreatedAt,
		arg.ScheduledAt,
		arg.Retry,
		arg.MaxRetry,
		arg.EventData,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ContextID,
		&i.EventOrigin,
		&i.EventType,
		&i.EventTypeVersion,
		&i.EventState,
		&i.CreatedAt,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.Retry,
		&i.MaxRetry,
		&i.EventData,
	)
	return i, err
}

const findCustomerEventByID = `-- name: FindCustomerEventByID :one
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events 
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindCustomerEventByID(ctx context.Context, id pgtype.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, findCustomerEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ContextID,
		&i.EventOrigin,
		&i.EventType,
		&i.EventTypeVersion,
		&i.EventState,
		&i.CreatedAt,
		&i.ScheduledAt,
		&i.StartedAt,
		&i.CompletedAt,
		&i.Retry,
		&i.MaxRetry,
		&i.EventData,
	)
	return i, err
}
