// Code generated by MockGen. DO NOT EDIT.
// Source: ./account_interface.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/account_handler_mock.go -package=mock -source=./account_interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	account "github.com/stefanowiczd/ddd-case-01/internal/application/account"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
	isgomock struct{}
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// BlockAccount mocks base method.
func (m *MockAccountService) BlockAccount(ctx context.Context, dto account.BlockAccountDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockAccount", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockAccount indicates an expected call of BlockAccount.
func (mr *MockAccountServiceMockRecorder) BlockAccount(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockAccount", reflect.TypeOf((*MockAccountService)(nil).BlockAccount), ctx, dto)
}

// CreateAccount mocks base method.
func (m *MockAccountService) CreateAccount(ctx context.Context, dto account.CreateAccountDTO) (account.CreateAccountResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, dto)
	ret0, _ := ret[0].(account.CreateAccountResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceMockRecorder) CreateAccount(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountService)(nil).CreateAccount), ctx, dto)
}

// Deposit mocks base method.
func (m *MockAccountService) Deposit(ctx context.Context, dto account.DepositDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockAccountServiceMockRecorder) Deposit(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockAccountService)(nil).Deposit), ctx, dto)
}

// GetAccount mocks base method.
func (m *MockAccountService) GetAccount(ctx context.Context, dto account.GetAccountDTO) (account.AccountResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, dto)
	ret0, _ := ret[0].(account.AccountResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceMockRecorder) GetAccount(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountService)(nil).GetAccount), ctx, dto)
}

// GetCustomerAccounts mocks base method.
func (m *MockAccountService) GetCustomerAccounts(ctx context.Context, dto account.GetCustomerAccountsDTO) (account.GetCustomerAccountsResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerAccounts", ctx, dto)
	ret0, _ := ret[0].(account.GetCustomerAccountsResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerAccounts indicates an expected call of GetCustomerAccounts.
func (mr *MockAccountServiceMockRecorder) GetCustomerAccounts(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerAccounts", reflect.TypeOf((*MockAccountService)(nil).GetCustomerAccounts), ctx, dto)
}

// UnblockAccount mocks base method.
func (m *MockAccountService) UnblockAccount(ctx context.Context, dto account.UnblockAccountDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockAccount", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockAccount indicates an expected call of UnblockAccount.
func (mr *MockAccountServiceMockRecorder) UnblockAccount(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockAccount", reflect.TypeOf((*MockAccountService)(nil).UnblockAccount), ctx, dto)
}

// Withdraw mocks base method.
func (m *MockAccountService) Withdraw(ctx context.Context, dto account.WithdrawDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockAccountServiceMockRecorder) Withdraw(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAccountService)(nil).Withdraw), ctx, dto)
}
