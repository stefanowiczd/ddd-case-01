// Code generated by MockGen. DO NOT EDIT.
// Source: ./customer_service_interface.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/customer_service_mock.go -package=mock -source=./customer_service_interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	customer "github.com/stefanowiczd/ddd-case-01/internal/application/customer"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerQueryService is a mock of CustomerQueryService interface.
type MockCustomerQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerQueryServiceMockRecorder
	isgomock struct{}
}

// MockCustomerQueryServiceMockRecorder is the mock recorder for MockCustomerQueryService.
type MockCustomerQueryServiceMockRecorder struct {
	mock *MockCustomerQueryService
}

// NewMockCustomerQueryService creates a new mock instance.
func NewMockCustomerQueryService(ctrl *gomock.Controller) *MockCustomerQueryService {
	mock := &MockCustomerQueryService{ctrl: ctrl}
	mock.recorder = &MockCustomerQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerQueryService) EXPECT() *MockCustomerQueryServiceMockRecorder {
	return m.recorder
}

// GetCustomer mocks base method.
func (m *MockCustomerQueryService) GetCustomer(ctx context.Context, dto customer.GetCustomerDTO) (customer.GetCustomerResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", ctx, dto)
	ret0, _ := ret[0].(customer.GetCustomerResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockCustomerQueryServiceMockRecorder) GetCustomer(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockCustomerQueryService)(nil).GetCustomer), ctx, dto)
}

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
	isgomock struct{}
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// BlockCustomer mocks base method.
func (m *MockCustomerService) BlockCustomer(ctx context.Context, dto customer.BlockCustomerDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCustomer", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockCustomer indicates an expected call of BlockCustomer.
func (mr *MockCustomerServiceMockRecorder) BlockCustomer(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCustomer", reflect.TypeOf((*MockCustomerService)(nil).BlockCustomer), ctx, dto)
}

// CreateCustomer mocks base method.
func (m *MockCustomerService) CreateCustomer(ctx context.Context, dto customer.CreateCustomerDTO) (customer.CreateCustomerResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, dto)
	ret0, _ := ret[0].(customer.CreateCustomerResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerServiceMockRecorder) CreateCustomer(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerService)(nil).CreateCustomer), ctx, dto)
}

// DeleteCustomer mocks base method.
func (m *MockCustomerService) DeleteCustomer(ctx context.Context, dto customer.DeleteCustomerDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockCustomerServiceMockRecorder) DeleteCustomer(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockCustomerService)(nil).DeleteCustomer), ctx, dto)
}

// UnblockCustomer mocks base method.
func (m *MockCustomerService) UnblockCustomer(ctx context.Context, dto customer.UnblockCustomerDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockCustomer", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockCustomer indicates an expected call of UnblockCustomer.
func (mr *MockCustomerServiceMockRecorder) UnblockCustomer(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockCustomer", reflect.TypeOf((*MockCustomerService)(nil).UnblockCustomer), ctx, dto)
}

// UpdateCustomer mocks base method.
func (m *MockCustomerService) UpdateCustomer(ctx context.Context, dto customer.UpdateCustomerDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockCustomerServiceMockRecorder) UpdateCustomer(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockCustomerService)(nil).UpdateCustomer), ctx, dto)
}
