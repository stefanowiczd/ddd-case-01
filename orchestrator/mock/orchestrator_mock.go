// Code generated by MockGen. DO NOT EDIT.
// Source: ./orchestrator_interface.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/orchestrator_mock.go -package=mock -source=./orchestrator_interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockBaseEvent is a mock of BaseEvent interface.
type MockBaseEvent struct {
	ctrl     *gomock.Controller
	recorder *MockBaseEventMockRecorder
	isgomock struct{}
}

// MockBaseEventMockRecorder is the mock recorder for MockBaseEvent.
type MockBaseEventMockRecorder struct {
	mock *MockBaseEvent
}

// NewMockBaseEvent creates a new mock instance.
func NewMockBaseEvent(ctrl *gomock.Controller) *MockBaseEvent {
	mock := &MockBaseEvent{ctrl: ctrl}
	mock.recorder = &MockBaseEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseEvent) EXPECT() *MockBaseEventMockRecorder {
	return m.recorder
}

// GetCompletedAt mocks base method.
func (m *MockBaseEvent) GetCompletedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCompletedAt indicates an expected call of GetCompletedAt.
func (mr *MockBaseEventMockRecorder) GetCompletedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedAt", reflect.TypeOf((*MockBaseEvent)(nil).GetCompletedAt))
}

// GetContextID mocks base method.
func (m *MockBaseEvent) GetContextID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetContextID indicates an expected call of GetContextID.
func (mr *MockBaseEventMockRecorder) GetContextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextID", reflect.TypeOf((*MockBaseEvent)(nil).GetContextID))
}

// GetCreatedAt mocks base method.
func (m *MockBaseEvent) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockBaseEventMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockBaseEvent)(nil).GetCreatedAt))
}

// GetEventData mocks base method.
func (m *MockBaseEvent) GetEventData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetEventData indicates an expected call of GetEventData.
func (mr *MockBaseEventMockRecorder) GetEventData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventData", reflect.TypeOf((*MockBaseEvent)(nil).GetEventData))
}

// GetID mocks base method.
func (m *MockBaseEvent) GetID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockBaseEventMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockBaseEvent)(nil).GetID))
}

// GetMaxRetry mocks base method.
func (m *MockBaseEvent) GetMaxRetry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxRetry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxRetry indicates an expected call of GetMaxRetry.
func (mr *MockBaseEventMockRecorder) GetMaxRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxRetry", reflect.TypeOf((*MockBaseEvent)(nil).GetMaxRetry))
}

// GetOrigin mocks base method.
func (m *MockBaseEvent) GetOrigin() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrigin")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOrigin indicates an expected call of GetOrigin.
func (mr *MockBaseEventMockRecorder) GetOrigin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrigin", reflect.TypeOf((*MockBaseEvent)(nil).GetOrigin))
}

// GetRetry mocks base method.
func (m *MockBaseEvent) GetRetry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRetry indicates an expected call of GetRetry.
func (mr *MockBaseEventMockRecorder) GetRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetry", reflect.TypeOf((*MockBaseEvent)(nil).GetRetry))
}

// GetScheduledAt mocks base method.
func (m *MockBaseEvent) GetScheduledAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetScheduledAt indicates an expected call of GetScheduledAt.
func (mr *MockBaseEventMockRecorder) GetScheduledAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledAt", reflect.TypeOf((*MockBaseEvent)(nil).GetScheduledAt))
}

// GetStartedAt mocks base method.
func (m *MockBaseEvent) GetStartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetStartedAt indicates an expected call of GetStartedAt.
func (mr *MockBaseEventMockRecorder) GetStartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartedAt", reflect.TypeOf((*MockBaseEvent)(nil).GetStartedAt))
}

// GetState mocks base method.
func (m *MockBaseEvent) GetState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockBaseEventMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockBaseEvent)(nil).GetState))
}

// GetType mocks base method.
func (m *MockBaseEvent) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockBaseEventMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockBaseEvent)(nil).GetType))
}

// GetTypeVersion mocks base method.
func (m *MockBaseEvent) GetTypeVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTypeVersion indicates an expected call of GetTypeVersion.
func (mr *MockBaseEventMockRecorder) GetTypeVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeVersion", reflect.TypeOf((*MockBaseEvent)(nil).GetTypeVersion))
}

// MockOrchestratorRepository is a mock of OrchestratorRepository interface.
type MockOrchestratorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorRepositoryMockRecorder
	isgomock struct{}
}

// MockOrchestratorRepositoryMockRecorder is the mock recorder for MockOrchestratorRepository.
type MockOrchestratorRepositoryMockRecorder struct {
	mock *MockOrchestratorRepository
}

// NewMockOrchestratorRepository creates a new mock instance.
func NewMockOrchestratorRepository(ctrl *gomock.Controller) *MockOrchestratorRepository {
	mock := &MockOrchestratorRepository{ctrl: ctrl}
	mock.recorder = &MockOrchestratorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorRepository) EXPECT() *MockOrchestratorRepositoryMockRecorder {
	return m.recorder
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}
