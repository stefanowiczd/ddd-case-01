// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events_query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findEvents = `-- name: FindEvents :many
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events
ORDER BY scheduled_at DESC
`

func (q *Queries) FindEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, findEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ContextID,
			&i.EventOrigin,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventState,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.Retry,
			&i.MaxRetry,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEventsByOrigin = `-- name: FindEventsByOrigin :many
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events
WHERE event_origin = $1
ORDER BY scheduled_at DESC
`

func (q *Queries) FindEventsByOrigin(ctx context.Context, eventOrigin string) ([]Event, error) {
	rows, err := q.db.Query(ctx, findEventsByOrigin, eventOrigin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ContextID,
			&i.EventOrigin,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventState,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.Retry,
			&i.MaxRetry,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEventsByOriginAndStatus = `-- name: FindEventsByOriginAndStatus :many
SELECT id, context_id, event_origin, event_type, event_type_version, event_state, created_at, scheduled_at, started_at, completed_at, retry, max_retry, event_data FROM events
WHERE event_origin = $1 AND event_state = $2
ORDER BY scheduled_at DESC
`

type FindEventsByOriginAndStatusParams struct {
	EventOrigin string
	EventState  string
}

func (q *Queries) FindEventsByOriginAndStatus(ctx context.Context, arg FindEventsByOriginAndStatusParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, findEventsByOriginAndStatus, arg.EventOrigin, arg.EventState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ContextID,
			&i.EventOrigin,
			&i.EventType,
			&i.EventTypeVersion,
			&i.EventState,
			&i.CreatedAt,
			&i.ScheduledAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.Retry,
			&i.MaxRetry,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setEventState = `-- name: SetEventState :exec
UPDATE events
SET event_state = $2
WHERE id = $1
`

type SetEventStateParams struct {
	ID         pgtype.UUID
	EventState string
}

func (q *Queries) SetEventState(ctx context.Context, arg SetEventStateParams) error {
	_, err := q.db.Exec(ctx, setEventState, arg.ID, arg.EventState)
	return err
}
