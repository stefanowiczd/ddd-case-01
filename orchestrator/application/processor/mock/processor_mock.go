// Code generated by MockGen. DO NOT EDIT.
// Source: ./processor_interface.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/processor_mock.go -package=mock -source=./processor_interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	account "github.com/stefanowiczd/ddd-case-01/internal/domain/account"
	customer "github.com/stefanowiczd/ddd-case-01/internal/domain/customer"
	event "github.com/stefanowiczd/ddd-case-01/internal/domain/event"
	gomock "go.uber.org/mock/gomock"
)

// MockBaseEvent is a mock of BaseEvent interface.
type MockBaseEvent struct {
	ctrl     *gomock.Controller
	recorder *MockBaseEventMockRecorder
	isgomock struct{}
}

// MockBaseEventMockRecorder is the mock recorder for MockBaseEvent.
type MockBaseEventMockRecorder struct {
	mock *MockBaseEvent
}

// NewMockBaseEvent creates a new mock instance.
func NewMockBaseEvent(ctrl *gomock.Controller) *MockBaseEvent {
	mock := &MockBaseEvent{ctrl: ctrl}
	mock.recorder = &MockBaseEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseEvent) EXPECT() *MockBaseEventMockRecorder {
	return m.recorder
}

// GetEventData mocks base method.
func (m *MockBaseEvent) GetEventData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetEventData indicates an expected call of GetEventData.
func (mr *MockBaseEventMockRecorder) GetEventData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventData", reflect.TypeOf((*MockBaseEvent)(nil).GetEventData))
}

// GetID mocks base method.
func (m *MockBaseEvent) GetID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockBaseEventMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockBaseEvent)(nil).GetID))
}

// GetOrigin mocks base method.
func (m *MockBaseEvent) GetOrigin() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrigin")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOrigin indicates an expected call of GetOrigin.
func (mr *MockBaseEventMockRecorder) GetOrigin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrigin", reflect.TypeOf((*MockBaseEvent)(nil).GetOrigin))
}

// GetType mocks base method.
func (m *MockBaseEvent) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockBaseEventMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockBaseEvent)(nil).GetType))
}

// MockOrchestratorRepository is a mock of OrchestratorRepository interface.
type MockOrchestratorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorRepositoryMockRecorder
	isgomock struct{}
}

// MockOrchestratorRepositoryMockRecorder is the mock recorder for MockOrchestratorRepository.
type MockOrchestratorRepositoryMockRecorder struct {
	mock *MockOrchestratorRepository
}

// NewMockOrchestratorRepository creates a new mock instance.
func NewMockOrchestratorRepository(ctrl *gomock.Controller) *MockOrchestratorRepository {
	mock := &MockOrchestratorRepository{ctrl: ctrl}
	mock.recorder = &MockOrchestratorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorRepository) EXPECT() *MockOrchestratorRepositoryMockRecorder {
	return m.recorder
}

// FindAllEvents mocks base method.
func (m *MockOrchestratorRepository) FindAllEvents(ctx context.Context) ([]*event.BaseEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEvents", ctx)
	ret0, _ := ret[0].([]*event.BaseEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEvents indicates an expected call of FindAllEvents.
func (mr *MockOrchestratorRepositoryMockRecorder) FindAllEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEvents", reflect.TypeOf((*MockOrchestratorRepository)(nil).FindAllEvents), ctx)
}

// FindByID mocks base method.
func (m *MockOrchestratorRepository) FindByID(ctx context.Context, id uuid.UUID) (*event.BaseEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*event.BaseEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockOrchestratorRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockOrchestratorRepository)(nil).FindByID), ctx, id)
}

// FindByOriginAndStatus mocks base method.
func (m *MockOrchestratorRepository) FindByOriginAndStatus(ctx context.Context, origin, state string, limit int) ([]*event.BaseEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOriginAndStatus", ctx, origin, state, limit)
	ret0, _ := ret[0].([]*event.BaseEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOriginAndStatus indicates an expected call of FindByOriginAndStatus.
func (mr *MockOrchestratorRepositoryMockRecorder) FindByOriginAndStatus(ctx, origin, state, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOriginAndStatus", reflect.TypeOf((*MockOrchestratorRepository)(nil).FindByOriginAndStatus), ctx, origin, state, limit)
}

// FindProcessableEvents mocks base method.
func (m *MockOrchestratorRepository) FindProcessableEvents(ctx context.Context, limit int) ([]*event.BaseEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProcessableEvents", ctx, limit)
	ret0, _ := ret[0].([]*event.BaseEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProcessableEvents indicates an expected call of FindProcessableEvents.
func (mr *MockOrchestratorRepositoryMockRecorder) FindProcessableEvents(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProcessableEvents", reflect.TypeOf((*MockOrchestratorRepository)(nil).FindProcessableEvents), ctx, limit)
}

// UpdateEventCompletion mocks base method.
func (m *MockOrchestratorRepository) UpdateEventCompletion(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventCompletion", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventCompletion indicates an expected call of UpdateEventCompletion.
func (mr *MockOrchestratorRepositoryMockRecorder) UpdateEventCompletion(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventCompletion", reflect.TypeOf((*MockOrchestratorRepository)(nil).UpdateEventCompletion), ctx, id)
}

// UpdateEventRetry mocks base method.
func (m *MockOrchestratorRepository) UpdateEventRetry(ctx context.Context, id uuid.UUID, retryInterval int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventRetry", ctx, id, retryInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventRetry indicates an expected call of UpdateEventRetry.
func (mr *MockOrchestratorRepositoryMockRecorder) UpdateEventRetry(ctx, id, retryInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventRetry", reflect.TypeOf((*MockOrchestratorRepository)(nil).UpdateEventRetry), ctx, id, retryInterval)
}

// UpdateEventStart mocks base method.
func (m *MockOrchestratorRepository) UpdateEventStart(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventStart", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventStart indicates an expected call of UpdateEventStart.
func (mr *MockOrchestratorRepositoryMockRecorder) UpdateEventStart(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventStart", reflect.TypeOf((*MockOrchestratorRepository)(nil).UpdateEventStart), ctx, id)
}

// UpdateEventState mocks base method.
func (m *MockOrchestratorRepository) UpdateEventState(ctx context.Context, id uuid.UUID, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventState", ctx, id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventState indicates an expected call of UpdateEventState.
func (mr *MockOrchestratorRepositoryMockRecorder) UpdateEventState(ctx, id, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventState", reflect.TypeOf((*MockOrchestratorRepository)(nil).UpdateEventState), ctx, id, state)
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// BlockAccount mocks base method.
func (m *MockAccountRepository) BlockAccount(ctx context.Context, accountEvent account.AccountBlockedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockAccount", ctx, accountEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockAccount indicates an expected call of BlockAccount.
func (mr *MockAccountRepositoryMockRecorder) BlockAccount(ctx, accountEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockAccount", reflect.TypeOf((*MockAccountRepository)(nil).BlockAccount), ctx, accountEvent)
}

// CreateAccount mocks base method.
func (m *MockAccountRepository) CreateAccount(ctx context.Context, accountEvent account.AccountCreatedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, accountEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryMockRecorder) CreateAccount(ctx, accountEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepository)(nil).CreateAccount), ctx, accountEvent)
}

// DepositFunds mocks base method.
func (m *MockAccountRepository) DepositFunds(ctx context.Context, accountEvent account.AccountFundsDepositedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositFunds", ctx, accountEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositFunds indicates an expected call of DepositFunds.
func (mr *MockAccountRepositoryMockRecorder) DepositFunds(ctx, accountEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositFunds", reflect.TypeOf((*MockAccountRepository)(nil).DepositFunds), ctx, accountEvent)
}

// FindByID mocks base method.
func (m *MockAccountRepository) FindByID(ctx context.Context, id uuid.UUID) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAccountRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAccountRepository)(nil).FindByID), ctx, id)
}

// WithdrawFunds mocks base method.
func (m *MockAccountRepository) WithdrawFunds(ctx context.Context, accountEvent account.AccountFundsWithdrawnEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFunds", ctx, accountEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFunds indicates an expected call of WithdrawFunds.
func (mr *MockAccountRepositoryMockRecorder) WithdrawFunds(ctx, accountEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFunds", reflect.TypeOf((*MockAccountRepository)(nil).WithdrawFunds), ctx, accountEvent)
}

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerRepository) CreateCustomer(ctx context.Context, arg1 customer.CustomerCreatedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerRepositoryMockRecorder) CreateCustomer(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).CreateCustomer), ctx, arg1)
}
